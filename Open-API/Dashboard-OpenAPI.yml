openapi: 3.0.3
info:
  title: Immersive-Dashboard
  version: 1.0.0
  description: Dashboard for ALTERRA Academy - Immersive Program
  contact:
    name: Official
    url: https://academy.alterra.id
    email: Academy@alterra.id
externalDocs:
  url: https://alta.id/immersive
  description: dokumentasi API alta immersive BE 13
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FEBRYANZAINAL/Immersive-Dashboard-OpenAPI/1.0.0
  - description: Real BE servers
    url: http://38.8.1.12:80
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Auth
    description: "authentication"
  - name: Users
    description: "Manajemen data Users"
  - name: Teams
    description: "Manajemen data Teams"
  - name: Classes
    description: "Manajemen data Classes"
  - name: Mentees
    description: "Manajemen data Mentees"
  - name: Feedbacks
    description: "Manajemen data Feedbacks"

paths:
  /users:
    post:
      tags:
        - Users
      summary: add user
      description: Menambah data User (register)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                full_name: "agus"
                email: "agus@mail.com"
                password: "qwerty123"
                id_team: 1
                role: "default"
                status: "active"
                permission: "superuser"
      responses:
        '201':
          description: Register berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "register berhasil"
        '400':
          description: Register gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "register gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
          #description: Register gagal.
          #content:
            #application/json:
              #schema:
                #type: object
                #example:
                  #status: "failed"
                  #message: "register gagal"
    get:
      tags:
        - Users
      summary: get all users
      description: Melihat seluruh data user
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 10
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all users"
                  data:
                    - id: 1
                      full_name: "agus"
                      email: "agus@mail.com"
                      team: 
                        {
                          id: 1,
                          team_name: "academic"
                        }
                      role: "default"
                      status: "active"
                      permission: "superuser"
                    - id: 2
                      full_name: "sisca"
                      email: "sisca@mail.com"
                      team: 
                        {
                          id: 2,
                          team_name: "people"
                        }
                      role: "default"
                      status: "active"
                      permission: "user"
                  
        '404':
          $ref: '#/components/responses/404'

  /users/{id_user}:
    get:
      tags:
        - Users
      summary: get users by id
      description: melihat data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_user
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of users by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get users by id"
                  data:
                    - id: 1
                      full_name: "agus"
                      email: "agus@mail.com"
                      team: 
                        {
                          id: 1,
                          team_name: "academic"
                        }
                      role: "default"
                      status: "active"
                      permission: "superuser"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Users
      summary: delete users by id
      description: delete data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete user status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete users"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Users
      summary: update specific users by id
      description: update specific data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_user
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                full_name: "agus"
                email: "agus@mail.com"
                password: "qwerty123"
                id_team: 1
                role: "default"
                status: "active"
                permission: "superuser"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update users"
        '404':
          $ref: '#/components/responses/404'

 
  /teams:
    post:
      tags:
        - Teams
      summary: add team
      description: Menambah data Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                team_name: "academy"
      responses:
        '201':
          description: Add team berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add team berhasil"
        '400':
          description: Add team gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add team gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500' 
    get:
      tags:
        - Teams
      summary: get all teams
      description: Melihat seluruh data teams
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all teams"
                  data:
                    - id: 1
                      team_name: "academy"                  
        '404':
          $ref: '#/components/responses/404'

  /teams/{id_teams}:
    get:
      tags:
        - Teams
      summary: get teams by id
      description: melihat data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_teams
          description: "id team"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of teams by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get teams by id"
                  data:
                    - id: 1
                      team_name: "academy"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Teams
      summary: delete teams by id
      description: delete data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete teams status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete teams"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Teams
      summary: update specific teams by id
      description: update specific data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                team_name: "academic"
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update teams"
        '404':
          $ref: '#/components/responses/404'


  /classes:
    post:
      tags:
        - Classes
      summary: add Class
      description: Menambah data Class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                class_name: "BE 13"
                user: "fakhry"

      responses:
        '201':
          description: Add team berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add team berhasil"
        '400':
          description: Add team gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add team gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500' 
    get:
      tags:
        - Teams
      summary: get all teams
      description: Melihat seluruh data teams
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all teams"
                  data:
                    - id: 1
                      team_name: "academy"                  
        '404':
          $ref: '#/components/responses/404'

  /classes/{id_classes}:
    get:
      tags:
        - Teams
      summary: get teams by id
      description: melihat data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_teams
          description: "id team"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of teams by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get teams by id"
                  data:
                    - id: 1
                      team_name: "academy"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Teams
      summary: delete teams by id
      description: delete data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete teams status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete teams"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Teams
      summary: update specific teams by id
      description: update specific data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                team_name: "academic"
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update teams"
        '404':
          $ref: '#/components/responses/404'

####################################
#...COMPONENTS...#
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
        id_team:
          type: integer
        role:
          type: string
          enum:
            - admin
            - user
        status:
          type: boolean
        permission:
        created_at:
          type: string
          format: date-time

    ResponseWithoutData:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
  responses:
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "data not found"


    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "internal server error"