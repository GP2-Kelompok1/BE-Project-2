openapi: 3.0.3
info:
  title: Immersive-Dashboard
  version: 1.0.0
  description: Dashboard for ALTERRA Academy - Immersive Program
  contact:
    name: Official
    url: https://academy.alterra.id
    email: Academy@alterra.id
externalDocs:
  url: https://alta.id/immersive
  description: dokumentasi API alta immersive BE 13
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FEBRYANZAINAL/Immersive-Dashboard-OpenAPI/1.0.0
  - description: Real Immersive-Dashboard servers 
    url: http:// 34.87.101.252:80
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Auth
    description: "authentication"
  - name: Users
    description: "Manajemen data Users"
  - name: Teams
    description: "Manajemen data Teams"
  - name: Classes
    description: "Manajemen data Classes"
  - name: Mentees
    description: "Manajemen data Mentees"
  - name: Feedbacks
    description: "Manajemen data Feedbacks"

paths:
  /Auth:
    post:
      tags: 
        - Auth
      summary: Login to system
      security:
         - JWTAuth: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              type: object
            example:
              email: "joko@mail.com"
              password: "qwerty123"
      responses:
        '200': 
          description: Success login.
          content:
            application/json:
              schema:
                type: object
              example:
                message: "success login"
                data: 
                    id: 12345
                    full_name: "joko"
                    email: "joko@mail.com"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users:
    post:
      tags:
        - Users
      summary: add user
      description: Menambah data User (register)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Users'
              example:
                full_name: "agus"
                email: "agus@mail.com"
                password: "qwerty123"
                id_team: 1
                role: "default"
                status: "active"
                permission: "superuser"
      responses:
        '201':
          description: Register berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "register berhasil"
        '400':
          description: Register gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "register gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
          #description: Register gagal.
          #content:
            #application/json:
              #schema:
                #type: object
                #example:
                  #status: "failed"
                  #message: "register gagal"
    get:
      tags:
        - Users
      summary: get all users
      description: Melihat seluruh data user
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 10
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all users"
                  data:
                    - id: 1
                      full_name: "agus"
                      email: "agus@mail.com"
                      team: 
                        {
                          id: 1,
                          team_name: "academic"
                        }
                      role: "default"
                      status: "active"
                      permission: "superuser"
                    - id: 2
                      full_name: "sisca"
                      email: "sisca@mail.com"
                      team: 
                        {
                          id: 2,
                          team_name: "people"
                        }
                      role: "default"
                      status: "active"
                      permission: "user"
                  
        '404':
          $ref: '#/components/responses/404'

  /users/{id_user}:
    get:
      tags:
        - Users
      summary: get users by id
      description: melihat data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_user
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of users by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get users by id"
                  data:
                    - id: 1
                      full_name: "agus"
                      email: "agus@mail.com"
                      team: 
                        {
                          id: 1,
                          team_name: "academic"
                        }
                      role: "default"
                      status: "active"
                      permission: "superuser"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Users
      summary: delete users by id
      description: delete data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_user
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete user status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete users"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Users
      summary: update specific users by id
      description: update specific data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_user
          description: "id user"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                full_name: "agus"
                email: "agus@mail.com"
                password: "qwerty123"
                id_team: 1
                role: "default"
                status: "active"
                permission: "superuser"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update users"
        '404':
          $ref: '#/components/responses/404'

 
  /teams:
    post:
      tags:
        - Teams
      summary: add team
      description: Menambah data Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                team_name: "academy"
      responses:
        '201':
          description: Add team berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add team berhasil"
        '400':
          description: Add team gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add team gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500' 
    get:
      tags:
        - Teams
      summary: get all teams
      description: Melihat seluruh data teams
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all teams"
                  data:
                    - id: 1
                      team_name: "academy"                  
        '404':
          $ref: '#/components/responses/404'

  /teams/{id_team}:
    get:
      tags:
        - Teams
      summary: get teams by id
      description: melihat data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_team
          description: "id team"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of teams by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get teams by id"
                  data:
                    - id: 1
                      team_name: "academy"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Teams
      summary: delete teams by id
      description: delete data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_team
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete teams status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete teams"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Teams
      summary: update specific teams by id
      description: update specific data teams by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_team
          description: "id teams"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                team_name: "academic"
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update teams"
        '404':
          $ref: '#/components/responses/404'


  /classes:
    post:
      tags:
        - Classes
      summary: add Class
      description: Menambah data Class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                class_name: "BE 13"
                id_user: 1
                started_date: "2022-08-27"

      responses:
        '201':
          description: Add class berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add class berhasil"
        '400':
          description: Add class gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add class gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500' 
    get:
      tags:
        - Classes
      summary: get all class
      description: Melihat seluruh data class
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all class
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all class"
                  data:
                    - id: 1
                      class_name: "BE 13"
                      user:
                        {
                        id_user: 1,
                        full_name: "fakhry"
                        }  
                      started_date: "2022-08-27"
                    - id: 2
                      class_name: "FE 10"
                      user:
                        {
                        id_user: 2,
                        full_name: "bagas"
                        }  
                      started_date: "2022-09-25"                
        '404':
          $ref: '#/components/responses/404'

  /classes/{id_class}:
    get:
      tags:
        - Classes
      summary: get class by id
      description: melihat data class by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_class
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of class by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get class by id"
                  data:
                    - id: 1
                      class_name: "BE 13"
                      user:
                        {
                        id_user: 1,
                        full_name: "fakhry"
                        }  
                      started_date: "2022-08-27"
                   
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Classes
      summary: delete class by id
      description: delete data class by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_class
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete class status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete class"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Classes
      summary: update specific class by id
      description: update specific data class by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_class
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                class_name: "BE 13"
                id_user: 2
                started_date: "2022-08-27"
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update teams"
        '404':
          $ref: '#/components/responses/404'
  /mentees:
    post:
      tags:
        - Mentees
      summary: add mentee
      description: Menambah data Mentee (register)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                mentee_name: "Mahmuda Karima"
                email: "daka@gmail.com"
                phone: "081234567"
                current_address: "jl rumah saya palembang"
                home_address: "jl rumah saya palembang"
                telegram: "@daka"
                gender: "L"
                education_type: "non-informatics"
                education_major: "akuntansi"
                education_graduate: "2022"
                education_institution: "SMA 1 Palembang"
                emergency_name: "bapak ku"
                emergency_phone: "08123457"
                emergency_status: "orang tua"
                status: "interview"
                class_id: 1
      responses:
        '201':
          description: Register berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "register berhasil"
        '400':
          description: Register gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "register gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
          #description: Register gagal.
          #content:
            #application/json:
              #schema:
                #type: object
                #example:
                  #status: "failed"
                  #message: "register gagal"
    get:
      tags:
        - Mentees
      summary: Get All Mentee
      description: Menampilkan semua data Mentee 
      security:
         - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 10
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all mentees
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all mentees"
                  data:
                    - id: 1
                      class:
                        {
                          id: 1,
                          class_name : "BE_11"
                        }
                      full_name: "M.Yusuf"
                      status: "On Class"
                      education_type: "non-informatics"
                      gender : "L"

                    - id: 2
                      class:
                        {
                          id: 2,
                          class_name : "FE_8"
                        }
                      full_name: "Wendy"
                      status: "On Class"
                      education_type: "non-informatics"
                      gender : "L"
                  
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/schemas/ResponseWithoutData'
  /mentees/{id_mentee}:
    get:
      tags:
        - Mentees
      summary: get mentees by id
      description: melihat data mentees by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_mentee
          description: "id mentee"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of mentees by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get mentees by id"
                  data:
                    - id: 1
                      class:
                        {
                          id: 1,
                          class_name : "BE_11"
                        }
                      full_name: "M. Yusup"
                      email: "myusup@gmail.com"
                      phone: "081234567"
                      current_address: "jl rumah saya palembang"
                      home_address: "jl rumah saya palembang"
                      telegram: "@daka"
                      gender: "L"
                      education_type: "non-informatics"
                      education_major: "akuntansi"
                      education_graduate: "2022"
                      education_institution: "SMA 1 Palembang"
                      emergency_name: "bapak ku"
                      emergency_phone: "08123457"
                      emergency_status: "orang tua"
                      feedback: 
                        {
                        id: 1,
                        mentee_status: "Ini bagian notes untuk mentee yang bersangkutan",
                        id_user: "Jerry",
                        changed_status: "Join"
                        }

                   
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Mentees
      summary: delete mentees by id
      description: delete data mentees by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_mentee
          description: "id mentees"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete mentees status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete mentees"
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Mentees
      summary: update specific mentee by id
      description: update specific data mentees by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_mentee
          description: "id mentees"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                mentee_name: "Rachman Kamil"
                email: "kamil@mail.com"
                phone: "081123131"
                telegram: "@kamil"
                gendel: "L"
      responses:
        '200':
          description: A list of Mentees
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update mentees"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /feedback:
    post:
      tags:
        - Feedbacks
      summary: post feedback
      description: menambah feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                id: 1
                deskripsi: "Ini bagian notes untuk mentee yang bersangkutan"
                user:
                  {
                    id_user: 1,
                    full_name: "jerry"         
                  }
                changed_status: "join"
      responses:
        '201':
          description: Add feedback berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add feedback berhasil"
        '404':
          description: Add feedback gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add feedback gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'    
  /feedback/{id_mentee}:
    get:
      tags:
        - Feedbacks
      summary: get feedback mentees by id
      description: melihat data feedback mentees by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_mentee
          description: "id mentee"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of feedback mentees by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get feedback mentees by id"
                  data:
                    - id: 1
                      full_name: "M. Yusup"
                      feedbacks:
                        {
                          id: 1,
                          id_user: 1,
                          deskripsi: "Ini bagian notes untuk mentee yang bersangkutan 1"
                        }
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /feedbacks/{id_feedback}:
    delete:
      tags:
        - Feedbacks
      summary: delete feedbacks by id
      description: delete data feedback by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_feedback
          description: "id feedback"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete feedback
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete feedbacks"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Feedbacks
      summary: update specific feedbacks by id
      description: update specific data feedback by id
      security:
        - JWTAuth: []
      parameters:
        - name: id_feedback
          description: "id feedback"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                id: 1
                deskripsi: "update notes untuk yang bersangkutan"
                
      responses:
        '200':
          description: success update feedback
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update users"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
####################################
#...COMPONENTS...#
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

  schemas:
    Users:
      type: object
      properties:
        id:
          type: integer
          format: uint
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
        id_team:
          type: integer
          format: uint
        role:
          type: string
          enum:
            - leader
            - staff
            - admin
        status:
          type: string
          enum:
           - active
           - not-active
        permission:
          type: string
          enum:
          - superuser
          - user
    Teams:
      type: object
      properties:
        id:
          type: integer
          format: uint
        team_name: 
          type: string
    Classes:
      type: object
      properties:
        id:
          type: integer
          format: uint
        class_name:
          type: string
        id_user:
          type: integer
          format: uint
        started_date:
          type: string
        end_date:
          type: string
    Mentee:
      type: object
      properties:
        id:
          type: integer
          format: uint
        mentee_name:
          type: string
        id_class:
          type: integer
          format: uint
        status:
          type: string
          enum:
            - Interview
            - Join class
            - Unit 1
            - Unit 2
            - Unit 3
            - Repeat unit 1
            - Repeat unit 2
            - Repeat unit 3
            - Placement
            - Eliminated
            - Graduated
        gender:
          type: integer
        current_address:
          type: string
        home_address:
          type: string
        email:
          type: string
        telegram:
          type: string
        emergency_phone:
          type: string
        emergency_status:
          type: string
        education_type:
          type: string
          enum:
            - informatics
            - non-informatics
        education_major:
          type: string
        education_graduate:
          type: string
        education_institution:
          type: string
        
    feedback:
      type: object
      properties:
        id:
          type: integer
          format: uint
        id_mentee:
          type: integer
          format: uint
        id_user:
          type: integer
          format: uint
        deskripsi:
          type: string
        mentee_status:
          type: string
        changed_status:
          type: string
    ResponseWithoutData:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
  responses:
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "data not found"


    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "internal server error"